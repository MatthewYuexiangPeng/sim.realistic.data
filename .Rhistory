devtools::load_all()
devtools::check()
devtools::check()
usethis::use_vignette("vignette_name")
devtools::check()
install.packages("usethis")
install.packages("usethis")
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_vignette()
usethis::use_vignette("vignette")
rm(list=ls())
library(foreach)
library(doParallel)
source('~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Final Code/functions.R')
source('D:/OneDrive - UW/Documents/GitHub/sim.realistic.data/R/sim_functions_organized.R')
datdir <- "~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Data/"
resdir <- "~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Result/"
# source('G:/CTRHS/Sentinel/Y6_Task_Orders/Methods/Cook-SurvivalII/Programming/Matthew/Final Code/functions_original.R')
# datdir <- "G:/CTRHS/Sentinel/Y7_Task_Orders_2015/Big sim/Data/datatoGHC/datatoGHC/Angioedema/"
# resdir <- '//groups/data/CTRHS/Sentinel/Y6_Task_Orders/Methods/Cook-SurvivalII/Programming/Matthew/Data/'
require(survival)
glm_control <- glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE)
cox.ctrl <- survival::coxph.control(eps=1e-09, toler.chol=.Machine$double.eps^0.75,
iter.max=10, toler.inf=sqrt(1e-09), outer.max=10)
sites <- c("AEOS","KPNC","HUOS","HCOS","HPHC")
names(sites) <- rep("site", length(sites))
## Type for censoring time, to fit Weibull model:
#### censtype = "simple", "simplebump", "cov", "covbump"
censtype <- "cov"
# ## Relax cox fitting settings to run faster
# cox.ctrl <- survival::coxph.control(eps=1e-09, toler.chol=.Machine$double.eps^0.75,
#                                     iter.max=20, toler.inf=sqrt(1e-09), outer.max=10)
tie.method <- "efron" ##"exact"
## Maximum follow-up Time (i.e. 1 year = 366 days)
trunc <- 365 # will be used when generating tab1
## Compute proportionate sample sizes using summary stats from full data
Summ.Stat <- readRDS(paste0(resdir,"angio_summary_20160507_cov_chain.rds"))
Sample.size.site <- do.call("cbind", lapply(Summ.Stat, function(XX) {
n.curr <- NULL
n.curr <- matrix(XX$n)
colnames(n.curr) <- XX$site
n.curr
}))
N.sim <- 150000
N.sim.site <- ceiling(N.sim*(Sample.size.site/sum(Sample.size.site)))
N.sim.site[[length(sites)]] <- N.sim - sum(N.sim.site[1:(length(sites)-1)])
Summ.Stat <- readRDS(paste0(resdir,"angio_summary_cov_chain_survival_241112_method2.rds"))
names(Summ.Stat) <- sites
dat.all <- do.call(rbind, lapply(1:5, function(XX) cbind(Summ.Stat[[XX]]$dat.boot,site=XX))) # Matthew: still need numeric
B <- with(dat.all, cbind(ipvisits,ed1plus,comor,sex))
C <- with(dat.all, cbind(age_cat,year))
S <- as.numeric(dat.all$site) # Matthew: generate NA here
C.indicator <- NULL
for (i in 1:ncol(C)) {
for (j in sort(unique(C[,i]))[-c(1)]) {
C.indicator <- cbind(C.indicator, as.integer(C[,i]==j))
}
}
S.indicator <- NULL
for (j in sort(unique(S))[-c(1)]) {
S.indicator <- cbind(S.indicator, as.integer(S==j))
}
dat.boot <- cbind(B,C.indicator,X=dat.all$X,Y=dat.all$Y,
E=dat.all$E,site=as.numeric(dat.all$site))
# dat.boot <- cbind(B,C.indicator,X=dat.all$X,Y=dat.all$Y,
#                   E=dat.all$E,site=dat.all$site)
prop.labels <- c("Intercept","1+ IP Visits","1+ ED Visits", "Comorbid 1+","Female",
"Age 45-54","Age 55-64","Age 65+","2009","2010","2011","2012",
"Site 2","Site 3","Site 4","Site 5")
out.labels <- c("ACEI","1+ IP Visits", "1+ ED Visits", "Comorbid 1+","Female",
"Age 45-54","Age 55-64","Age 65+","2009","2010","2011","2012",
"Site 2","Site 3","Site 4","Site 5")
## Summary of dataset used in example
ps.boot <- glm(X~.,data=as.data.frame(cbind(dat.boot[,1:12],S.indicator)))
ps.boot.coef <- ps.boot$coefficients
ps.boot.se <- sqrt(diag(vcov(ps.boot)))
ps.boot.tab <- round(cbind(ps.boot.coef,ps.boot.se),4)
rownames(ps.boot.tab) <- prop.labels
ps.boot.site <- NULL
ps.boot.site.or <- NULL
for (i in 1:length(sites)) {
temp <- temp.coef <- temp.se <- temp.tab <- index <- NULL
index <- dat.boot[,'site'] == i
temp <- glm(X~.,data=as.data.frame(cbind(dat.boot[index,1:12])))
temp.coef <- temp$coefficients
temp.or <- exp(temp.coef)
temp.se <- sqrt(diag(vcov(temp)))
temp.or.se <- sqrt(temp.or*temp.or*temp.se*temp.se)
temp.tab <- round(cbind(temp.coef,temp.se),4)
temp.tab.or <- round(cbind(temp.or,temp.or.se),4)
ps.boot.site <-cbind(ps.boot.site,temp.tab)
ps.boot.site.or <-cbind(ps.boot.site.or,temp.tab.or)
}
rownames(ps.boot.site) <- prop.labels[1:12]
rownames(ps.boot.site.or) <- prop.labels[1:12]
# het <- unlist(foreach(i=Summ.Stat) %do% exp(i$cox.coef.adjusted[[1]]))# Matthew: No cox.coef.adjusted for binary. delete the 2 rows
# logHR <- list(1.0,1.0,1.5,1.5,2.0,2.0,het,het)
# #####
samp.size <- dim(dat.boot)[[1]]
sim_num = 2
n.sim <- sim_num
# seed1<-83745 bump
# seed1<-379 simple
seed1 <- 566391
n_cores <- detectCores()
set.seed(seed1)
res <- NULL
start <- proc.time()[3]
res <- list()
sim.dat.norm <- generate.data.survival(Summ.Stat, censtype = censtype, trunc = 366, method = 2) # 1
View(Summ.Stat)
samp.size <- dim(dat.boot)[[1]]
sim_num = 2
n.sim <- sim_num
# seed1<-83745 bump
# seed1<-379 simple
seed1 <- 566391
n_cores <- detectCores()
set.seed(seed1)
res <- NULL
start <- proc.time()[3]
res <- list()
sim.estimates <- sapply(1:n.sim, function(XX) NULL)
PS.beta.site.norm <- sapply(1:length(sites), function(XX) NULL)
PS.beta.site.chain <- sapply(1:length(sites), function(XX) NULL)
PS.beta.site.boot <- sapply(1:length(sites), function(XX) NULL)
PS.beta.norm <- NULL
PS.beta.chain <- NULL
PS.beta.boot <- NULL
cox.site.norm <- sapply(1:length(sites), function(XX) NULL)
cox.site.chain <- sapply(1:length(sites), function(XX) NULL)
cox.site.boot <- sapply(1:length(sites), function(XX) NULL)
cox.pooled.norm <- NULL
cox.pooled.chain <- NULL
cox.pooled.boot <- NULL
common.prob.norm <- sapply(1:n.sim, function(XX) NULL)
common.prob.chain <- sapply(1:n.sim, function(XX) NULL)
common.prob.boot <- sapply(1:n.sim, function(XX) NULL)
sim=1
sim.dat.norm <- generate.data.survival(Summ.Stat, censtype = censtype, trunc = 366, method = 2) # 1
censtype
rm(list=ls())
library(foreach)
library(doParallel)
source('~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Final Code/functions.R')
source('D:/OneDrive - UW/Documents/GitHub/sim.realistic.data/R/sim_functions_organized.R')
datdir <- "~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Data/"
resdir <- "~/Yuexiang Peng/UW/Research/Jennifer Nelson/Cook/summer project/simu_0817/Result/"
# source('G:/CTRHS/Sentinel/Y6_Task_Orders/Methods/Cook-SurvivalII/Programming/Matthew/Final Code/functions_original.R')
# datdir <- "G:/CTRHS/Sentinel/Y7_Task_Orders_2015/Big sim/Data/datatoGHC/datatoGHC/Angioedema/"
# resdir <- '//groups/data/CTRHS/Sentinel/Y6_Task_Orders/Methods/Cook-SurvivalII/Programming/Matthew/Data/'
require(survival)
glm_control <- glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE)
cox.ctrl <- survival::coxph.control(eps=1e-09, toler.chol=.Machine$double.eps^0.75,
iter.max=10, toler.inf=sqrt(1e-09), outer.max=10)
sites <- c("AEOS","KPNC","HUOS","HCOS","HPHC")
names(sites) <- rep("site", length(sites))
## Type for censoring time, to fit Weibull model:
#### censtype = "simple", "simplebump", "cov", "covbump"
censtype <- "simple"
# ## Relax cox fitting settings to run faster
# cox.ctrl <- survival::coxph.control(eps=1e-09, toler.chol=.Machine$double.eps^0.75,
#                                     iter.max=20, toler.inf=sqrt(1e-09), outer.max=10)
tie.method <- "efron" ##"exact"
## Maximum follow-up Time (i.e. 1 year = 366 days)
trunc <- 365 # will be used when generating tab1
## Compute proportionate sample sizes using summary stats from full data
Summ.Stat <- readRDS(paste0(resdir,"angio_summary_20160507_cov_chain.rds"))
Sample.size.site <- do.call("cbind", lapply(Summ.Stat, function(XX) {
n.curr <- NULL
n.curr <- matrix(XX$n)
colnames(n.curr) <- XX$site
n.curr
}))
N.sim <- 150000
N.sim.site <- ceiling(N.sim*(Sample.size.site/sum(Sample.size.site)))
N.sim.site[[length(sites)]] <- N.sim - sum(N.sim.site[1:(length(sites)-1)])
## Run summary statistics at each site
begin <- proc.time()
cl <- makeCluster(length(sites))
registerDoParallel(cl)
seed1 <- 596841 # change to see if we avoid creating na. original:596840
clusterSetRNGStream(cl = cl, iseed = seed1) #Multiple streams of seeds
Summ.Stat <- NULL
system.time(
Summ.Stat <- foreach(site=sites,size=N.sim.site) %dopar% {
# #test
# site <- "KPNC"
# size <- 19275
Y <- E <- X <- comor <- ipvisits <- age_cat <- white <- sex <- dat <- NULL
SS.list <- NULL
dat <- readRDS(paste0(datdir,paste0(site,".rds")))
names(dat) <- tolower(names(dat))
dat <- dat[dat$year < 2013,]
dat <- dat[sample(1:dim(dat)[[1]],size),] # Matthew: why do we need resample? I think is to make the sample size smaller. If not resample, create NA at adj.coef.event for unknown reason
Y <- dat$event_astreated
E <- dat$followuptime_astreated
Y[E>365] <- 0
E[E>365] <- 365
## Pattern of Prescriptions fills for bump detection
prescription.mode <- as.numeric(names(tail(sort(table(E[Y==0])/length(E[Y==0])),3)))
## number of top frequent bumps to pick up
my.presc.K <- length(prescription.mode)
X <- dat$exposure
## Binary covariates must be coded as 0/1
comor <- cut(dat$comorbidscore, breaks = c(-2.5,0,100), labels=FALSE) - 1
ipvisits <- cut(dat$numip, breaks = c(-1,0,100), labels=FALSE) - 1
age_cat <- cut(dat$age, breaks = c(0,44,54,64,150), labels=FALSE)
ed1plus <- dat$numed > 0
sex <- dat$sex == 'F'
B <- cbind(ipvisits,ed1plus,comor,sex)
C <- cbind(age_cat, year=dat$year)
# test for get.summstat.survival function
SS.list <- get.summstat.survival(E=E,Y=Y,X=X,B=B,A=C,prescription.mode,
my.presc.K,tie.method,method=2)
# test for get.summstat.binary function
# SS.list <- get.summstat.binary(Y=Y,X=X,B=B,A=C)
SS.list <- append(SS.list, site, after=0)
# norm.spec <- .ordtonorm(probs=SS.list$P.ord, Cor=SS.list$Corr.ord)
append(SS.list,
list(
# Corr.norm=norm.spec$corr.norm,
# Quants.norm=norm.spec$quants.norm,
# logHR.X=SS.list$cox.coef.adjusted[[1]],
# intercept=SS.list$adj.coef.event[[1]],
dat.boot=data.frame(X,Y,E,B,C))
)
}
)
stopCluster(cl)
proc.time() - begin
saveRDS(Summ.Stat,paste0(resdir,"angio_summary_cov_chain_survival_241112_method2.rds"))
## Sample the same dataset that was used for summary statistics.
## This will be the basis for boostrap sampling.-----
Summ.Stat <- readRDS(paste0(resdir,"angio_summary_cov_chain_survival_241112_method2.rds"))
names(Summ.Stat) <- sites
dat.all <- do.call(rbind, lapply(1:5, function(XX) cbind(Summ.Stat[[XX]]$dat.boot,site=XX))) # Matthew: still need numeric
B <- with(dat.all, cbind(ipvisits,ed1plus,comor,sex))
C <- with(dat.all, cbind(age_cat,year))
S <- as.numeric(dat.all$site) # Matthew: generate NA here
C.indicator <- NULL
for (i in 1:ncol(C)) {
for (j in sort(unique(C[,i]))[-c(1)]) {
C.indicator <- cbind(C.indicator, as.integer(C[,i]==j))
}
}
S.indicator <- NULL
for (j in sort(unique(S))[-c(1)]) {
S.indicator <- cbind(S.indicator, as.integer(S==j))
}
dat.boot <- cbind(B,C.indicator,X=dat.all$X,Y=dat.all$Y,
E=dat.all$E,site=as.numeric(dat.all$site))
# dat.boot <- cbind(B,C.indicator,X=dat.all$X,Y=dat.all$Y,
#                   E=dat.all$E,site=dat.all$site)
prop.labels <- c("Intercept","1+ IP Visits","1+ ED Visits", "Comorbid 1+","Female",
"Age 45-54","Age 55-64","Age 65+","2009","2010","2011","2012",
"Site 2","Site 3","Site 4","Site 5")
out.labels <- c("ACEI","1+ IP Visits", "1+ ED Visits", "Comorbid 1+","Female",
"Age 45-54","Age 55-64","Age 65+","2009","2010","2011","2012",
"Site 2","Site 3","Site 4","Site 5")
## Summary of dataset used in example
ps.boot <- glm(X~.,data=as.data.frame(cbind(dat.boot[,1:12],S.indicator)))
ps.boot.coef <- ps.boot$coefficients
ps.boot.se <- sqrt(diag(vcov(ps.boot)))
ps.boot.tab <- round(cbind(ps.boot.coef,ps.boot.se),4)
rownames(ps.boot.tab) <- prop.labels
ps.boot.site <- NULL
ps.boot.site.or <- NULL
for (i in 1:length(sites)) {
temp <- temp.coef <- temp.se <- temp.tab <- index <- NULL
index <- dat.boot[,'site'] == i
temp <- glm(X~.,data=as.data.frame(cbind(dat.boot[index,1:12])))
temp.coef <- temp$coefficients
temp.or <- exp(temp.coef)
temp.se <- sqrt(diag(vcov(temp)))
temp.or.se <- sqrt(temp.or*temp.or*temp.se*temp.se)
temp.tab <- round(cbind(temp.coef,temp.se),4)
temp.tab.or <- round(cbind(temp.or,temp.or.se),4)
ps.boot.site <-cbind(ps.boot.site,temp.tab)
ps.boot.site.or <-cbind(ps.boot.site.or,temp.tab.or)
}
rownames(ps.boot.site) <- prop.labels[1:12]
rownames(ps.boot.site.or) <- prop.labels[1:12]
samp.size <- dim(dat.boot)[[1]]
sim_num = 2
n.sim <- sim_num
# seed1<-83745 bump
# seed1<-379 simple
seed1 <- 566391
n_cores <- detectCores()
set.seed(seed1)
res <- NULL
start <- proc.time()[3]
res <- list()
sim.dat.norm <- generate.data.survival(Summ.Stat, censtype = censtype, trunc = 366, method = 2) # 1
sim.dat.norm
View(Summ.Stat)
sim.dat.norm$A1 <- apply(sim.dat.norm[, c("A.1", "A.2", "A.3")], 1, function(x) which(x == 1))
# 将 A.4 - A.7 转换回原来的分类变量 B
sim.dat.norm$A2 <- apply(sim.dat.norm[, c("A.4", "A.5", "A.6", "A.7")], 1, function(x) which(x == 1))
# 将原始的indicator列移除
sim.dat.norm <- sim.dat.norm[, !colnames(sim.dat.norm) %in% c("A.1", "A.2", "A.3", "A.4", "A.5", "A.6", "A.7")]
# 查看结果
head(sim.dat.norm)
# sample 1000个
sim.dat.norm <- sim.dat.norm[sample(1:nrow(sim.dat.norm), 1000), ]
# 存到本地
write.csv(sim.dat.norm, file = paste0("sim.dat.norm_", sim, ".csv"))
# 存到本地
write.csv(sim.dat.norm, file = paste0("sim.dat.norm_example", ".csv"))
# 存到本地
write.csv(sim.dat.norm, file = paste0("sim.dat.norm_example.csv"))
# 存到本地
write.csv(sim.dat.norm, file = "sim.dat.norm_example.csv")
sim.dat.norm
sim.dat.norm$A1[is.na(sim.dat.norm$A1)] <- 4
sim.dat.norm$A2[is.na(sim.dat.norm$A2)] <- 5
# 查看结果
head(sim.dat.norm)
sim.dat.norm$A1[is.na(sim.dat.norm$A1)]
sim.dat.norm <- generate.data.survival(Summ.Stat, censtype = censtype, trunc = 366, method = 2) # 1
# 假设 sim.dat.norm 是你的数据框
# 将 A.1 - A.3 转换回原来的分类变量 A，假设全0表示分类变量为0
sim.dat.norm$A1 <- apply(sim.dat.norm[, c("A.1", "A.2", "A.3")], 1, function(x) {
if (all(x == 0)) {
return(0)
} else {
return(which(x == 1))
}
})
# 将 A.4 - A.7 转换回原来的分类变量 B，假设全0表示分类变量为0
sim.dat.norm$A2 <- apply(sim.dat.norm[, c("A.4", "A.5", "A.6", "A.7")], 1, function(x) {
if (all(x == 0)) {
return(0)
} else {
return(which(x == 1))
}
})
# 将原始的indicator列移除
sim.dat.norm <- sim.dat.norm[, !colnames(sim.dat.norm) %in% c("A.1", "A.2", "A.3", "A.4", "A.5", "A.6", "A.7")]
# 查看结果
head(sim.dat.norm)
sim.dat.norm <- generate.data.survival(Summ.Stat, censtype = censtype, trunc = 366, method = 2) # 1
# 假设 sim.dat.norm 是你的数据框
# 将 A.1 - A.3 转换回原来的分类变量 A，假设全0表示分类变量为0
sim.dat.norm$A1 <- apply(sim.dat.norm[, c("A.1", "A.2", "A.3")], 1, function(x) {
if (all(x == 0)) {
return(1)
} else {
return(which(x == 1)+1)
}
})
# 将 A.4 - A.7 转换回原来的分类变量 B，假设全0表示分类变量为0
sim.dat.norm$A2 <- apply(sim.dat.norm[, c("A.4", "A.5", "A.6", "A.7")], 1, function(x) {
if (all(x == 0)) {
return(1)
} else {
return(which(x == 1)+1)
}
})
# 将原始的indicator列移除
sim.dat.norm <- sim.dat.norm[, !colnames(sim.dat.norm) %in% c("A.1", "A.2", "A.3", "A.4", "A.5", "A.6", "A.7")]
# 查看结果
head(sim.dat.norm)
write.csv(sim.dat.norm, "sim_dat_norm.csv", row.names = FALSE)
saveRDS(sim.dat.norm, "sim_dat_norm.rds")
usethis::use_data(sim.dat.norm, overwrite = TRUE)
devtools::document()
data(sim.dat.norm)
head(sim.dat.norm)
as.matrix(c(data$B.1,data$B.2))
data <- data(sim.dat.norm)
data$B.1
data
data(sim.dat.norm)
head(sim.dat.norm)
example_data <- sim.dat.norm
usethis::use_data(example_data,overwrite = TRUE)
data(example_data)
example_data
dim(example_data)
example_data$B.1
head(example_data)
as.matrix(example_data[, c("B.1", "B.2", "B.3", "B.4")])
B <- as.matrix(example_data[, c("B.1", "B.2", "B.3", "B.4")])
A <- as.matrix(example_data[, c("A1", "A2")])
get.summstat.survival(E, Y, X, B, A, prescription.mode = seq(30, trunc, by = 30), my.presc.K = 1, tie.method = "efron", method = "all", censtype = "simple")
E <- example_data$E
get.summstat.survival(E, Y, X, B, A, prescription.mode = seq(30, trunc, by = 30), my.presc.K = 1, tie.method = "efron", method = "all", censtype = "simple")
data(example_data)
E <- example_data$E
Y <- example_data$Y
X <- example_data$X
B <- as.matrix(example_data[, c("B.1", "B.2", "B.3", "B.4")])
A <- as.matrix(example_data[, c("A1", "A2")])
get.summstat.survival(E, Y, X, B, A, prescription.mode = seq(30, trunc, by = 30), my.presc.K = 1, tie.method = "efron", method = "all", censtype = "simple")
data(example_data)
E <- example_data$E
Y <- example_data$Y
X <- example_data$X
B <- as.matrix(example_data[, c("B.1", "B.2", "B.3", "B.4")])
A <- as.matrix(example_data[, c("A1", "A2")])
summstat.binary <- get.summstat.binary(Y, X, B, A, method = "all")
summstat.binary
usethis::use_data(example_data, summstat.survival, summstat.binary, overwrite = TRUE)
summstat.survival <- get.summstat.survival(E, Y, X, B, A, prescription.mode = seq(30, trunc, by = 30), my.presc.K = 1, tie.method = "efron", method = "all", censtype = "simple")
summstat.survival
usethis::use_data(example_data, summstat.survival, summstat.binary, overwrite = TRUE)
data(summ.stat.survival)
data(summstat.survival)
data(summstat.survival)
simulated_data_survival <- generate.data.survival(Summ.Stat=summstat.survival,n=NULL,censtype="simple", trunc=365,method=1, set.logHR.X=NULL)
summstat.survival
dim(summstat.survival)
length(summstat.survival)
list(summstat.survival)
summstat.survival = list(summstat.survival)
simulated_data_survival <- generate.data.survival(Summ.Stat=summstat.survival,n=NULL,censtype="simple", trunc=365,method=1, set.logHR.X=NULL)
head(simulated_data_survival)
data(summstat.binary)
simulated_data_binary <- generate.data.binary(Summ.Stat=summstat.binary, method=1)
data(summstat.binary)
summstat.binary = list(summstat.binary)
simulated_data_binary <- generate.data.binary(Summ.Stat=summstat.binary, method=1)
summstat.binary
Summ.Stat$n
Summ.Stat[[1]]$n
Summ.Stat=summstat.binary
Summ.Stat[[1]]$n
summstat.binary = list(summstat.binary)
simulated_data_binary <- generate.data.binary(Summ.Stat=summstat.binary, method=1)
length(Summ.Stat)
Summ.Stat[[1]]
generate.data.binary <- function(Summ.Stat,n=NULL,method=1, set.logOR.X=NULL){
# # test 11.12
# method=2
# set.logOR.X=NULL
# i=1
n.sites<-length(Summ.Stat)
## Data.Site: simulated data across sites
Data.Simulated <- NULL
Data.Marg <- NULL
## Data.Pool.forPS: pooled data for est pooled PS
Data.Pool.forPS <- NULL
## Loop through sites to generate site specific data
for(i in 1:n.sites)
{
## read in summary statistics SS
SS <- Summ.Stat[[i]]
if(is.null(n)) {n <- SS$n}
## generate site specific data
# TODO: method 4 working?
if (method==1){
DS <- .gendata.binary(n=n, coef.XonZ=SS$coef.XonZ,
method=method, Corr.norm=SS$Corr.norm, Quant.norm=SS$Quants.norm, P.ord=SS$P.ord,
coef.Yon1=SS$coef.Yon1, coef.YonX=SS$coef.YonX, coef.YonZ=SS$coef.YonZ,
logOR.X=set.logOR.X)
} else if (method==2){
DS <- .gendata.binary(n=n, Corr.norm.B=SS$Corr.norm.B, Quant.norm.B=SS$Quants.norm.B, coef.XonZ=SS$coef.XonZ,
coef.AonB=SS$Coef.cat,
method=method,
coef.Yon1=SS$coef.Yon1, coef.YonX=SS$coef.YonX, coef.YonZ=SS$coef.YonZ,
logOR.X=set.logOR.X)
} else if (method==3){
DS <- .gendata.binary(n=n, coef.XonZ=SS$coef.XonZ,
coef.chain=SS$Coef.bin, coef.AonB=SS$Coef.cat,
method=method,
coef.Yon1=SS$coef.Yon1, coef.YonX=SS$coef.YonX, coef.YonZ=SS$coef.YonZ,
logOR.X=set.logOR.X)
} # else if (method==4){}
# DS <- .gendata.binary(n=n, P=SS$P, Common.P=SS$Common.P, coef.XonZ=SS$coef.XonZ,
#                      coef.chain=SS$Coef.bin, coef.AonB=SS$Coef.cat,
#                      method=method, Corr.norm=SS$Corr.norm, Quant.norm=SS$Quants.norm, P.ord=SS$P.ord,
#                      coef.Yon1=SS$coef.Yon1, coef.YonX=SS$coef.YonX, coef.YonZ=SS$coef.YonZ,
#                      logOR.X=set.logOR.X)
## save site specific data
if (n.sites > 1) {
Data.Simulated <- rbind(Data.Simulated, data.frame(B=DS$B,A=DS$A.indicator,X=DS$X,Y=DS$Y,site=i))
Data.Marg <- rbind(Data.Marg,data.frame(site=i,DS$marginal.dat))
} else {
Data.Simulated <- data.frame(B=DS$B, A=DS$A.indicator, X=DS$X,Y=DS$Y)
Data.Marg <- data.frame(DS$marginal.dat)
}
}
# return(list(Data.Simulated=Data.Simulated,Data.Marginal=Data.Marg))
return(Data.Simulated)
}
summstat.binary = list(summstat.binary)
simulated_data_binary <- generate.data.binary(Summ.Stat=summstat.binary, method=1)
head(simulated_data_binary)
data(summstat.binary)
summstat.binary = list(summstat.binary)
simulated_data_binary <- generate.data.binary(Summ.Stat=summstat.binary, method=1)
head(simulated_data_binary)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_pkgdown()
pkgdown::build_site()
install_github("MatthewYuexiangPeng/sim.realistic.data")
library(devtools)
install_github("MatthewYuexiangPeng/sim.realistic.data")
devtools::install_github("username/sim.realistic.data", dependencies = TRUE)
devtools::install_github("MatthewYuexiangPeng/sim.realistic.data", dependencies = TRUE)
devtools::install_github("MatthewYuexiangPeng/sim.realistic.data")
devtools::install_github("MatthewYuexiangPeng/sim.realistic.data")
find_rtools()
Sys.setenv(LANG="en")
)
